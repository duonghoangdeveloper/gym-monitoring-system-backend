type Package {
  _id: ID!
  
  # Package info
  name: String!
  price: Int
  period: Int
  
  # Timestamp
  createdAt: String!
  updatedAt: String!
}

type Query {
  package(_id: ID!): Package!
  packages(query: PackagesQueryInput): Packages!
}

type Mutation {
  createPackage(data: CreatePackageInput!): Package!
  updatePackage(_id: ID!, data: UpdatePackageInput): Package!
  deletePackage(_id: ID!): Package!
}

type Packages {
  data: [Package!]!
  total: Int!
}

input PackagesQueryInput {
  skip: Int
  limit: Int
  sort: String
  search: PackagesSearchInput
}

input PackagesSearchInput {
  name: String
}

input CreatePackageInput {
  name: String!
  price: Int!
  period: Int!
}

input UpdatePackageInput {
  name: String
  price: Int
  period: Int
}