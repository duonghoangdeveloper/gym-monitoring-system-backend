type User {
  _id: ID!

  # Authorization
  username: String!
  role: Role!

  # Personal info
  displayName: String
  gender: Gender
  email: String
  phone: String
  avatar: File

  # Timestamp
  createdAt: String!
  updatedAt: String!
}

type Query {
  auth: User!
<<<<<<< HEAD
  users: Users!
  findUser(_id: ID!): User!
=======
  users(query: UsersQueryInput): Users!
>>>>>>> master
}

type Mutation {
  signIn(data: SignInInput!): UserAuthPayload!
  signOut: User!
  signOutAll: User!
  createUser(data: CreateUserInput!): User!
  updateUser(_id: ID!, data: UpdateUserInput): User!
  updateProfile(data: UpdateProfileInput): User!
<<<<<<< HEAD
  deleteUser(_id: ID!): User!
 
=======
  updatePassword(data: UpdatePasswordInput): User!
>>>>>>> master
}

type Users {
  data: [User!]!
  total: Int!
}

type UserAuthPayload {
  data: User!
  token: String!
}

input SignInInput {
  username: String!
  password: String!
}

input UsersQueryInput {
  skip: Int
  limit: Int
  sort: UsersSortInput
  search: UsersSearchInput
  filter: UsersFilterInput
}

input UsersSortInput {
  username: SortOrder
  displayName: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UsersSearchInput {
  username: String
  displayName: String
}

input UsersFilterInput {
  role: [Role!]
}

input CreateUserInput {
  username: String!
  password: String!
  displayName: String
  gender: Gender
  email: String
  phone: String
  role: Role
}

input UpdateUserInput {
  username: String!
  displayName: String
  gender: Gender!
  role: Role
  email: String
  phone: String
}

input UpdateProfileInput {
  username: String
  displayName: String
  phone: String
  email: String
  gender: String
}

input UpdatePasswordInput {
  oldPassword: String!
  newPassword: String!
}

enum Role {
  CUSTOMER
  TRAINER
  MANAGER
  GYM_OWNER
  SYSTEM_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
