type User {
  _id: ID!

  # Authorization
  username: String!
  role: Role!
  # expiredDate: String
  # Personal info
  displayName: String
  gender: Gender
  email: String
  phone: String
  avatar: File
  isOnline: Boolean
  expiryDate: String

  feedbacks(query: FeedbacksQueryInput): Feedbacks!
  payments(query: PaymentsQueryInput): Payments!
  warnings(query: WarningsQueryInput): Warnings!

  # Timestamp
  createdAt: String!
  updatedAt: String!
}

type Query {
  auth: User!
  users(query: UsersQueryInput): Users!
  usersCount(query: UsersCountInput): Int!
  usersCounts(queries: [UsersCountInput!]): [Int]!
  validateUser(data: ValidateUserInput): UserErrors!
}

type Mutation {
  signIn(data: SignInInput!): UserAuthPayload!
  signOut: User!
  signOutAll: User!
  createUser(data: CreateUserInput!): User!
  updateUser(_id: ID!, data: UpdateUserInput): User!
  updateProfile(data: UpdateProfileInput): User!
  updatePassword(data: UpdatePasswordInput): User!
  updateAvatar(data: UpdateAvatarInput!): User!
  changeOnlineStatus(_id: ID!, status: Boolean): User!
  deactivateUser(_id: ID!): User!
  activateUser(_id: ID!): User!
  deleteUsers(query: UsersQueryInput):Int!
  createDummyUser(amount: Int!, role:Role!):[User!]!
}

type Users {
  data: [User!]!
  total: Int!
}

type UserAuthPayload {
  data: User!
  token: String!
}

type UserErrors {
  username: [String!]
  displayName: [String!]
  password: [String!]
  gender: [String!]
  role: [String!]
  email: [String!]
  phone: [String!]
}

input SignInInput {
  username: String!
  password: String!
  deviceToken: String
}

input UsersQueryInput {
  skip: Int
  limit: Int
  sort: String
  search: UsersSearchInput
  filter: UsersFilterInput
  createdBetween: CreatedBetweenInput
  isActive: Boolean
}

input UsersCountInput {
  search: UsersSearchInput
  filter: UsersFilterInput
  createdBetween: CreatedBetweenInput
  isActive: Boolean
}

input UsersSearchInput {
  username: String
  displayName: String
  email: String
  role: Role


}

input UsersFilterInput {
  role: [Role!]
}

input CreateUserInput {
  username: String!
  password: String!
  displayName: String
  gender: Gender
  email: String
  phone: String
  role: Role
  faces: [Upload!]!
}

input UpdateUserInput {
  username: String
  displayName: String
  gender: Gender
  role: Role
  email: String
  phone: String
}

input UpdateProfileInput {
  username: String
  displayName: String
  phone: String
  email: String
  gender: Gender
}

input UpdatePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input UpdateAvatarInput {
  avatar: Upload!
}

input ValidateUserInput {
  username: String
  password: String
  displayName: String
  gender: Gender
  role: Role
  email: String
  phone: String
}

enum Role {
  CUSTOMER
  TRAINER
  MANAGER
  GYM_OWNER
  SYSTEM_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
